package ${modulePackage};

import java.util.ArrayList;
import java.util.List;

import com.smartgwt.client.data.DSCallback;
import com.smartgwt.client.data.DSRequest;
import com.smartgwt.client.data.DSResponse;
import com.smartgwt.client.types.SelectionStyle;
import com.smartgwt.client.util.BooleanCallback;
import com.smartgwt.client.util.SC;
import com.smartgwt.client.widgets.Canvas;
import com.smartgwt.client.widgets.events.ClickEvent;
import com.smartgwt.client.widgets.events.ClickHandler;
import com.smartgwt.client.widgets.form.fields.FormItem;
import com.smartgwt.client.widgets.toolbar.ToolStrip;
import com.wpams.client.common.FormBase;
import com.wpams.client.common.FormWait;
import com.wpams.client.common.GHelper;
import com.wpams.client.common.SCx;
import com.wpams.client.common.modulelayout.AbstractTwoModuleLayout;
import com.wpams.client.common.widgets.WPForm;
import com.wpams.client.common.widgets.WPIButton;
import com.wpams.client.common.widgets.WPIconButton;
import com.wpams.client.common.widgets.WPListGrid;
import com.wpams.client.common.widgets.WPListGridField;
import com.wpams.client.common.widgets.WPTextItem;
import com.wpams.client.common.widgets.WPToolStrip;
import com.wpams.client.common.widgets.WPWindow;
import ${DSPackage}.${DSName};
import ${beanPackage}.${beanName};

/**
 * ${moduleComment}
 * @author ${author}
 * @date ${dateTime}
 * @version ${version}
 */
public class ${moduleName} extends FormBase {

	/** ${<fl>objectName}列表 */
	private WPListGrid ${<fl>objectName}Grid = null;

	/** 修改${<fl>objectName}的窗口 */
	private WPWindow edit${<fu>objectName}Window = null;

	/** 修改${<fl>objectName}的表单 */
	private WPForm edit${<fu>objectName}Form = null;

	/** 刷新${<fl>objectName}的按钮 */
	private WPIconButton refresh${<fu>objectName}Button = null;

	/** 新增${<fl>objectName}的按钮 */
	private WPIconButton add${<fu>objectName}Button = null;

	/** 修改${<fl>objectName}的按钮 */
	private WPIconButton update${<fu>objectName}Button = null;

	/** 删除${<fl>objectName}的按钮 */
	private WPIconButton delete${<fu>objectName}Button = null;

	@Override
	public void FormCreate() {
		AbstractTwoModuleLayout moduleLayout = new AbstractTwoModuleLayout() {
			@Override
			public Canvas getFirstCanvas() {
				return get${<fu>objectName}ToolStrip();
			}

			@Override
			public Canvas getSecondCanvas() {
				return get${<fu>objectName}Grid();
			}
		};

		_panel.setWidth100();
		_panel.setHeight100();
		_panel.addMember(moduleLayout);
	}

	/**
	 * 此方法返回${<fu>objectName}的工具栏
	 * @return
	 * @author ${author}
	 * @date ${dateTime}
	 * @version ${version}
	 */
	public ToolStrip get${<fu>objectName}ToolStrip() {
		refresh${<fu>objectName}Button = powerIconButton("刷新", "btnrefresh");
		add${<fu>objectName}Button = powerIconButton("新增", "btnadd");
		update${<fu>objectName}Button = powerIconButton("修改", "btnupdate");
		delete${<fu>objectName}Button = powerIconButton("删除", "btndelete");

		//刷新按钮点击事件
		refresh${<fu>objectName}Button.addClickHandler(new ClickHandler() {
			@Override
			public void onClick(ClickEvent event) {
				refresh${<fu>objectName}Grid();
			}
		});

		//新增按钮点击事件
		add${<fu>objectName}Button.addClickHandler(new ClickHandler() {
			@Override
			public void onClick(ClickEvent event) {
				getAdd${<fu>objectName}Window();
			}
		});

		//修改按钮点击事件
		update${<fu>objectName}Button.addClickHandler(new ClickHandler() {
			@Override
			public void onClick(ClickEvent event) {
				getUpdate${<fu>objectName}Window();
			}
		});

		//删除按钮点击事件
		delete${<fu>objectName}Button.addClickHandler(new ClickHandler() {
			@Override
			public void onClick(ClickEvent event) {
				delete${<fu>objectName}Event();
			}
		});

		WPToolStrip toolStrip = new WPToolStrip();
		toolStrip.setWidth100();
		toolStrip.addMembers(refresh${<fu>objectName}Button,add${<fu>objectName}Button,update${<fu>objectName}Button,delete${<fu>objectName}Button);
		toolStrip.addFill();

		return toolStrip;
	}

	/**
	 * 此方法返回${<fu>objectName}列表
	 * @return
	 * @author ${author}
	 * @date ${dateTime}
	 * @version ${version}
	 */
	public WPListGrid get${<fu>objectName}Grid() {
		${<fl>objectName}Grid = new WPListGrid(-1);
%{*(isShowPager)		${<fl>objectName}Grid.setShowPager(true);
		${<fl>objectName}Grid.setPagerDefaultPageSize(20);
}%		${<fl>objectName}Grid.setShowAllRecords(true);
		${<fl>objectName}Grid.setCanReorderRecords(false);
		${<fl>objectName}Grid.setHeight100();
		${<fl>objectName}Grid.setWidth100();
		${<fl>objectName}Grid.setDataSource(${DSName}.getInstance(new String[] { "${<l>moduleName_E}" }, null));
		${<fl>objectName}Grid.setAutoFetchData(true);
		${<fl>objectName}Grid.setEmptyMessage("");
		${<fl>objectName}Grid.setSelectionType(SelectionStyle.SINGLE);
		${<fl>objectName}Grid.setFields(get${<fu>objectName}GridFields());
		setContextMenuX(${<fl>objectName}Grid, refresh${<fu>objectName}Button, add${<fu>objectName}Button, update${<fu>objectName}Button, delete${<fu>objectName}Button);

%{*(isShowPager)		${<fl>objectName}Grid.setPageCallback(new BooleanCallback() {
			@Override
			public void execute(Boolean value) {
				refresh${<fu>objectName}Grid();
			}
		});
		
}%		return ${<fl>objectName}Grid;
	}

	/**
	 * 调用此方法进行刷新${<fl>objectName}列表
	 * @return
	 * @author ${author}
	 * @date ${dateTime}
	 * @version ${version}
	 */
	public void refresh${<fu>objectName}Grid() {
		if (${<fl>objectName}Grid != null) {
			${DSName}.getInstance(new String[] { "${<l>moduleName_E}"}, null);
			${<fl>objectName}Grid.invalidateCache();
			${<fl>objectName}Grid.fetchData();
		}
	}

	/**
	 * 此方法返回${<fu>objectName}列表的字段
	 * @return
	 * @author ${author}
	 * @date ${dateTime}
	 * @version ${version}
	 */
	public WPListGridField[] get${<fu>objectName}GridFields() {
		List<WPListGridField> allFields = new ArrayList<WPListGridField>();
		
#{*(columns)		WPListGridField ?{currentColumn}?Field = new WPListGridField("?{<l>currentColumn}?", "?{columnDescription}?", "10%");
}#
		//设置中心对齐
		setFieldAlign(#{*(columns)@(dl)?{currentColumn}?Field,}#);

#{*(columns)		allFields.add(?{currentColumn}?Field);
}#
		return allFields.toArray(new WPListGridField[0]);
	}

	/**
	 * 调用此方法获取操作${<fu>objectName}的窗口
	 * @param saveButton 保存按钮
	 * @param cancelButton 关闭按钮
	 * @param editTag 0为新增，1为修改
	 * @return
	 * @author ${author}
	 * @date ${dateTime}
	 * @version ${version}
	 */
	private void getEdit${<fu>objectName}Window(WPIButton saveButton, WPIButton cancelButton, int editTag) {
		edit${<fu>objectName}Form = new WPForm();
		edit${<fu>objectName}Form.setDataSource(${DSName}.getInstance(null, null));
		edit${<fu>objectName}Form.setItems(getEdit${<fu>objectName}FormItems(editTag));
		edit${<fu>objectName}Form.setComDisabledONOFF(saveButton);
		edit${<fu>objectName}Form.setEnter2Tab(saveButton);
		edit${<fu>objectName}Form.focusInItem(0);

		edit${<fu>objectName}Window = new WPWindow();
		edit${<fu>objectName}Window.setEditItem(edit${<fu>objectName}Form, saveButton, cancelButton);
		edit${<fu>objectName}Window.draw();

		switch (editTag) {
		case 0:
			edit${<fu>objectName}Window.setTitle("新增");
			edit${<fu>objectName}Form.editNewRecord();
			break;
		case 1:
			edit${<fu>objectName}Window.setTitle("修改");
			edit${<fu>objectName}Form.editSelectedData(${<fl>objectName}Grid);
			break;
		default:
			break;
		}
	}

	/**
	 * 此方法返回操作${<fu>objectName}表单的表单项
	 * @param bean 新增参数
	 * @return
	 * @author ${author}
	 * @date ${dateTime}
	 * @version ${version}
	 */
	public FormItem[] getEdit${<fu>objectName}FormItems(int editTag) {
#{*(columns)		WPTextItem ?{<fl>currentColumn}?Item = new WPTextItem("?{<l>columnName}?", "?{columnDescription}?", true);
}#
		return new FormItem[] {#{*(columns)@(dl)?{<fl>currentColumn}?Item,}#};
	}

	/**
	 * 此方法返回新增${<fu>objectName}的窗口
	 * @return
	 * @author ${author}
	 * @date ${dateTime}
	 * @version ${version}
	 */
	public void getAdd${<fu>objectName}Window() {
		if (!checkPower("btnadd")) {
			SC.say("没有权限");
			return;
		}

		WPIButton saveButton = new WPIButton("确定");
		saveButton.addClickHandler(new ClickHandler() {
			public void onClick(ClickEvent event) {
				add${<fu>objectName}Event();
			}
		});

		WPIButton cancelButton = new WPIButton("取消");
		cancelButton.addClickHandler(new ClickHandler() {
			public void onClick(ClickEvent event) {
				edit${<fu>objectName}Window.destroy();
			}
		});

		getEdit${<fu>objectName}Window(saveButton, cancelButton, 0);
	}

	/**
	 * 调用此方法执行新增${<fu>objectName}
	 * @return
	 * @author ${author}
	 * @date ${dateTime}
	 * @version ${version}
	 */
	public void add${<fu>objectName}Event() {
		edit${<fu>objectName}Form.setValue("adduserkid", GHelper.UserID());// 新增人kid
		edit${<fu>objectName}Form.setValue("addusername", GHelper.UserName());// 新增人姓名
		if (edit${<fu>objectName}Form.validate()) {
			FormWait.waiting("正在保存...");
			edit${<fu>objectName}Form.saveData(new DSCallback() {
				@Override
				public void execute(final DSResponse dsResponse, Object data, DSRequest dsRequest) {
					if (dsResponse.getData() != null && dsResponse.getData().length > 0) {
						SCx.ask4Add(new BooleanCallback() {
							@Override
							public void execute(Boolean value) {
								edit${<fu>objectName}Form.editNewRecord();
							}
						}, new BooleanCallback() {
							@Override
							public void execute(Boolean value) {
								edit${<fu>objectName}Window.destroy();
							}
						});
					}
				}
			});
		}
	}

	/**
	 * 此方法返回修改${<fu>objectName}的窗口
	 * @return
	 * @author ${author}
	 * @date ${dateTime}
	 * @version ${version}
	 */
	public void getUpdate${<fu>objectName}Window() {
		if (!checkPower("btnupdate")) {
			SC.say("没有权限");
			return;
		}

		if (${<fl>objectName}Grid.getSelectedRecords().length != 1) {
			SC.say("请先单击选择一条您要修改的记录!");
			return;
		}

		WPIButton saveButton = new WPIButton("确定");
		saveButton.addClickHandler(new ClickHandler() {
			public void onClick(ClickEvent event) {
				update${<fu>objectName}Event();
			}
		});

		WPIButton cancelButton = new WPIButton("取消");
		cancelButton.addClickHandler(new ClickHandler() {
			public void onClick(ClickEvent event) {
				edit${<fu>objectName}Window.destroy();
			}
		});

		getEdit${<fu>objectName}Window(saveButton, cancelButton, 1);
	}

	/**
	 * 调用此方法修改${<fu>objectName}
	 * @return
	 * @author ${author}
	 * @date ${dateTime}
	 * @version ${version}
	 */
	public void update${<fu>objectName}Event() {
		edit${<fu>objectName}Form.setValue("edituserkid", GHelper.UserID());// 修改人kid
		edit${<fu>objectName}Form.setValue("editusername", GHelper.UserName());// 修改人姓名
		if (edit${<fu>objectName}Form.validate()) {
			FormWait.waiting("正在保存...");
			edit${<fu>objectName}Form.saveData(new DSCallback() {
				@Override
				public void execute(final DSResponse dsResponse, Object data, DSRequest dsRequest) {
					if (dsResponse.getData() != null && dsResponse.getData().length > 0) {
						if (dsResponse.getData() != null) {
							edit${<fu>objectName}Window.destroy();
						}
					}
				}
			});
		}
	}

	/**
	 * 调用此方法删除${<fu>objectName}
	 * @return
	 * @author ${author}
	 * @date ${dateTime}
	 * @version ${version}
	 */
	public void delete${<fu>objectName}Event() {
		if (!checkPower("btndelete")) {
			SC.say("没有权限");
			return;
		}

		if (${<fl>objectName}Grid.getSelectedRecords().length != 1) {
			SC.say("请先单击选择一条您要删除的记录!");
			return;
		}

		SC.ask("您确定要删除当前记录吗？", new BooleanCallback() {
			public void execute(Boolean value) {
				if (value != null && value) {
					FormWait.waiting("正在删除...");
					${<fl>objectName}Grid.getSelectedRecord().setAttribute("deluserkid", GHelper.UserID());
					${<fl>objectName}Grid.getSelectedRecord().setAttribute("delusername", GHelper.UserName());
					${<fl>objectName}Grid.removeSelectedData();
				}
			}
		});
	}
}